AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cognitive Cyber Defense - Anomaly Detection Infrastructure'

Resources:
  # DynamoDB Tables
  AlertsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CyberDefense-Alerts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: alert_id
          AttributeType: S
      KeySchema:
        - AttributeName: alert_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CyberDefense-Feedback
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: feedback_id
          AttributeType: S
      KeySchema:
        - AttributeName: feedback_id
          KeyType: HASH

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebSocket-Connections
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
      KeySchema:
        - AttributeName: connection_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !GetAtt AlertsTable.Arn
                  - !GetAtt FeedbackTable.Arn
                  - !GetAtt WebSocketConnectionsTable.Arn
        - PolicyName: APIGatewayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: '*'

  # Lambda Functions
  AlertHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CyberDefense-AlertHandler
      Runtime: python3.9
      Handler: alert-handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Placeholder - upload actual code
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Hello World'}
      Timeout: 30

  WebSocketHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CyberDefense-WebSocketHandler
      Runtime: python3.9
      Handler: websocket-handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Placeholder - upload actual code
          def lambda_handler(event, context):
              return {'statusCode': 200}
      Timeout: 30

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CyberDefense-API
      Description: Anomaly Detection REST API

  AlertsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: alerts

  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: feedback

  # API Gateway Methods
  AlertsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AlertsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AlertHandlerFunction.Arn}/invocations'

  AlertsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref AlertsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AlertHandlerFunction.Arn}/invocations'

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: CyberDefense-WebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: prod
      AutoDeploy: true

  # Lambda Permissions
  AlertHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AlertHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*'

  WebSocketHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

Outputs:
  RestApiUrl:
    Description: REST API Gateway URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: CyberDefense-RestApiUrl

  WebSocketUrl:
    Description: WebSocket API Gateway URL
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: CyberDefense-WebSocketUrl